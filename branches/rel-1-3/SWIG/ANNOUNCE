*** ANNOUNCE: SWIG 1.3.14 ***

http://www.swig.org

August 12, 2002

We're pleased to announce SWIG 1.3.14, the latest installment in the
SWIG development effort.  SWIG-1.3.14 continues to push SWIG's
support for C++ even further---SWIG now supports overloaded methods,
smart pointers, and more.

What is SWIG?
-------------
SWIG is a software development tool that reads C/C++ header files and
generates the wrapper code needed to make C and C++ code accessible
from other languages including Perl, Python, Tcl, Ruby, PHP, Java,
Guile, Mzscheme, and Ocaml.  Major applications of SWIG include
generation of scripting language extension modules, rapid prototyping,
testing, and user interface development for large C/C++ systems.  SWIG
has been available for more than six years and it is used by thousands
of developers--primarily in industry and research.

New Features in 1.3.14
----------------------
* C++ overloading support *

C++ overloaded methods and functions now work in most target languages.
For instance, if you have functions like this:

    int foo(int x);
    int foo(int x, int y);
    int foo(char *s);

You can call the functions naturally from the target language. For
instance

    >>> foo(3)
    >>> foo(3,4)
    >>> foo("hello world")

SWIG supports overloading by generating a dynamic dispatch function
that picks the appropriate function by examining the types of input
arguments. The creation of this function does not depend on the
order of declarations, is fully integrated into the SWIG typemap system,
and is more powerful than the overloading systems built into 
similar tools.

* C++ Smart pointer support */

If a class implements operator->(), SWIG automatically makes all of
the members of the returned object available.  For example, if you
have classes like this:

   struct Foo {
      int x;
      int blah();
   }

   struct Bar {
      int spam();
      Foo *operator->();
      ...
   }

Then you can do things like this:

   >>> b = Bar()   # Create a bar
   >>> b.spam()    # Invokes Bar::spam()
   >>> b.blah()    # Invokes Foo::blah()  (through operator->())
   >>> b.x = 3     # Modifies Foo::x      (through operator->())

This capability allows SWIG to work with smart-pointer classes.
Templates are also fully supported.

* Language module improvements *

Many improvements have been made to the language modules.  Examples
include support for Python 2.2 new-style classes, an improved
Tcl object interface, changes to PHP and Java object wrapping, and
more.

* New Modules *

A module for Ocaml has been added.  SWIG is also able to generate XML
output using an XML module.

* Bug fixes *

Numerous bug fixes in many parts of SWIG. See the CHANGES file for 
details.

Availability:
-------------
The release is available for download on Sourceforge at

     http://prdownloads.sourceforge.net/swig/swig-1.3.14.tar.gz

Within the next day, a Windows version will also be made available at

     http://prdownloads.sourceforge.net/swig/swigwin-1.3.14.zip

New Development Process
-----------------------
With SWIG1.3, we are adopting an odd/even version numbering scheme for
SWIG.  Odd version numbers (1.3, 1.5, 1.7, etc...) are considered to
be development releases.  Even numbers (1.4,1.6,1.8) are stable
releases.  The current 1.3 effort is working to produce a stable 2.0
release.  A stable 2.0 release will not be made until it can
accompanied by fully updated documentation.  In the meantime, we will
continue to make periodic 1.3.x releases.

We need your help!
------------------
Even if you are perfectly happy with SWIG1.1, we can still use your
feedback.  First, we like to know about compilation problems and other
issues concerning the building of SWIG.  Second, if SWIG1.3 is unable
to compile your old interface files, we would like to get information
about the features you are using.  This information will help us find
bugs in the SWIG1.3 release, develop techniques for supporting
backwards compatibility, and write documentation that addresses
specific issues related to migrating from SWIG1.1 to SWIG1.3.

We are also looking for volunteers who would like to work on various
aspects of SWIG development.  SWIG is an unfunded project that would
not exist without volunteers.  We are also looking for the developers
of other SWIG language modules.  If you have developed a SWIG module
and would like to see it incorporated into the new release, please
contact us to obtain SWIG-CVS access.  We are also more than willing
to help port your module from SWIG1.1 to SWIG1.3.  Please send email
to beazley@cs.uchicago.edu for further information.

Please report problems with this release to swig-dev@cs.uchicago.edu.

--- The SWIG Developers












