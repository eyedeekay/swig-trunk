*** ANNOUNCE: SWIG 1.3.10 ***

December 10, 2001

We're pleased to announce the next installment of the SWIG1.3
redevelopment effort.  The 1.3.10 release primarily addresses problems
related to SWIG's internal implementation.  Substantial changes have
been made to all of SWIG's language modules.  In addition, typemaps
and exception handling have been completely rewritten.

*** SPECIAL DISCLAIMER ***

SWIG-1.3.10 represents work in progress and is very likely to be
broken in a number of critical areas (in fact, it may not work at all
on your machine).  This release includes some of the most substantial
changes to the internals that have occurred in the last several years.
We are also working very hard to eliminate some very nasty
long-standing limitations of SWIG-1.1.  However, to make SWIG better,
we need to get your feedback about what's broken and what can be improved.
Please try it out and let us know how (and if) it works.

Note: A more stable 1.3.11 release is planned for early January.

New Features in 1.3.10
----------------------

* Redesigned Typemaps *

The typemap system has been almost completely rewritten.  The major
improvement in this release is support for multi-argument typemaps.
This addresses the problem of wrapping functions where multiple arguments
might be mapped to a single object in the target language.  For example:

    void foo(char *buffer, int len);          // String and length
    void bar(int *ptr, int rows, int cols);   // Pointer and shape

This has been a long requested SWIG feature (for more than 4 years).
SWIG-1.3.10 is the first release to allow this.  Here is an example
of a multi-argument typemap:

    %typemap(in) (char *buffer, int len) {
        $1 = PyString_AsString($input);
        $2 = PyString_Size($input);
    }

* Overloaded Operators *

Overloaded operators can now be wrapped as easily as standard methods.
Simply give the operators an acceptable name.  For example:

    %rename(__add__) operator+;
    %rename(__sub__) operator-;
    ...

Some language modules now provide automatic conversion of certain
operators to special methods.  However, this is experimental and in
still in development.  SWIG-1.3.10 is powerful enough to handle
operator overloading if you are willing to handle the renaming
yourself.

* Enhanced exception handling *

A new %exception directive allows exception handlers to be attached
to specific declarations.  For example:

   %exception getitem {
      try {
         $action
      } catch(RangeError) {
         ...
      }
    }

    class List {
    ...
      T getitem(int index);    <-- Exception handler added here
    ...
    };

This feature can greatly reduce the amount of generated code and allows
exception handling to be more finely tuned.   The new %exception directive
also allows exception handlers to be defined in advanced--making it easy to
include raw header files.  For example:

   %exception Object::getitem(int) {
       ...
   }

   %include "header.h"

* PHP module *

SWIG-1.3.10 is the first release to include support for PHP4.  This work has
been contributed by Richard Palmer and is still in progress.   

* Improved internals *

SWIG is now building a complete parse tree of the interface before generating
any code.  The whole language module API has also been completely redesigned
to give the code generators greatly flexibility.   For now, you will only notice
superficial changes (e.g., the generated wrapper code is better).   However,
more amazing stuff is on the way.

* More updated documentation *

Continued updates of the SWIG Users Manual are included in this release including
entirely new sections on typemaps and exception handling.  The first 7 chapters
of the old manual are now entirely up-to-date with SWIG-1.3.10.   However,
updating all of the old documentation is an ongoing process and is not yet
finished (we are working on it).

Availability:
-------------
The release is available for download on Sourceforge at

     http://download.sourceforge.net/swig/swig-1.3.10.tar.gz

Within the next day, a Windows version will also be made available at

     http://download.sourceforge.net/swig/swigwin-1.3.10.zip

What's broken?
--------------
This release breaks backwards compatibility with SWIG1.1 in a
substantial manner.  Although we realize that this may be painful,
these incompatibilities are unavoidable due to corrections that needed
to be made in order to fix semantic errors in the SWIG1.1
implementation.  However, we hope that these changes are a small price
to pay for some of SWIG's new features including support for C++
templates, overloading, and improved parsing.

As this is a work in progress, a number of features are still missing
or incomplete.  The documentation system is still missing and won't be
reimplemented for some time.  Programmers who have made extensive use of
typemaps may encounter broken code due to the reimplementation of the typemap
system (which has tried to fix a number of subtle problems).

The Perl5 module is also in some need of some repair and may not work
with all Perl configurations such as ActivePerl (It seems to work with
a standard Perl5.6.1 distribution however).  We are looking for a
fearless volunteer to help us with future Perl5 support (please skip
to the end for details).

The Java module is also undergoing some renovation and may not be
fully functional in this release.

Documentation
-------------
This release contains partially updated documentation.  Almost all new
SWIG features are described in the updated documentation.  The CHANGES
file contains a detailed log of changes and the README file contains
some additional information. 

New Development Process
-----------------------
Starting with SWIG1.3, we are adopting an odd/even version numbering
scheme for SWIG.  Odd version numbers (1.3, 1.5, 1.7, etc...) are
considered to be unstable development releases.  Even numbers
(1.4,1.6,1.8) are stable releases.  The current 1.3 effort is working
to produce a stable 1.4 release.  A stable 1.4 release will not be
made until it can accompanied by fully updated documentation.  In the
meantime, we will continue to make periodic 1.3.x releases.

We need your help!
------------------
Even if you are perfectly happy with SWIG1.1, we can still use your
feedback.  First, we like to know about compilation problems and other
issues concerning the building of SWIG.  Second, if SWIG1.3 is unable
to compile your old interface files, we would like to get information
about the features you are using.  This information will help us find
bugs in the SWIG1.3 release, develop techniques for supporting
backwards compatibility, and write documentation that addresses
specific issues related to migrating from SWIG1.1 to SWIG1.3.

We are also looking for volunteers who would like to work on various
aspects of SWIG development.  SWIG is an unfunded project that would
not exist without volunteers.  We are also looking for the developers
of other SWIG language modules.  If you have developed a SWIG module
and would like to see it incorporated into the new release, please
contact us to obtain SWIG developer access.  We are also more than
willing to help port your module from SWIG1.1 to SWIG1.3.
Please send email to beazley@cs.uchicago.edu for further information.

Please report problems with this release to swig-dev@cs.uchicago.edu.

--- The SWIG Developers












