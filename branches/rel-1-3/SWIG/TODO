SWIG TO-DO    

Release: SWIG-1.3.13    (Late July, 2002)
-----------------------------------------------------------------------------

****    = High Priority
***     = Implement if possible.
**      = Will implement if time. 
*       = Implement if bored (or deemed necessary).

CORE:

****   Add support for nested classes.   The type system should be
       ready to go.  The primary obstacle lies in the target language
       modules (which were never programmed with nested classes in
       mind).  There are also issues with nested C structures.  For
       example:

             struct Foo {
                 struct {
                     int x,y;
                 } z;
             };

       This is one of the last remaining "hard" problems in the SWIG
       core, but it is important that we solve it.  

***    Support for overloaded functions.   It is probably possible to
       add some kind of support for this.  Overloading has been supported
       internally for quite some time---the warning messages are there
       simply as a stop-gap measure (since no language modules support
       overloading).    We would keep the the existing %rename support.

***    Support for smart-pointers and proxies.  This is primarily to
       support classes that implement the -> operator and which are used
       to dispatch on another class.   I think it would be cool if
       SWIG could automatically detect and handle this case.   For example, 
       if you had this:

            class FooProxy {
               ...
               Foo *operator->();
               ...
            };

       Perhaps SWIG could automagically locate Foo and arrange for its
       methods to be associated with FooProxy.  This is really not too
       bad.   The proxy methods could be wrapped normally with only
       one minor modification in the wrapper code.   If the class Foo had
       a method "bar" it would be invoked as this, through the proxy:

            FooProxy *arg1;     // Object pointer (to proxy)
            (*arg1)->bar();  
             ^
            extra "*" added here.

       I think automatic wrapping of methods would be much nicer than
       requiring the use of a special directive.

***    Rewrite declaration annotation to better unify %rename and related
       directives.  Add a selector mechanism that allows specific parse tree
       nodes to be identified.  For example:

             %feature("foo", nodetype="class") Foo { ... some code ... };

       Consider use of wildcards.   Namespace/nested scope support in
       %feature is currently weak.  It works, but is fragile.  Consider
       an implementation that is better integrated with symbol table
       management.  Continue to consolidate SWIG directives to %feature.

***    Bring Aquinas' contract/assertion checking code online.

***    Add more intelligent information related to object ownership.
       SWIG should be able to automatically strip ownership from 
       objects when they are assigned to pointer variables and structure
       members as well as stored in a container (i.e., an array of pointers).

**     Restoration of the documentation system.

**     Restoration of Objective-C support.

**     Unification of symbol tables and type system scopes.  In a sense
       they capture the same information so it is not necessary to have
       both.  The existence of two symbol management systems is mostly
       historical. 

*      Fix template partial specialization matching rules.   SWIG does not
       implement the proper C++ type deduction rules, but it does handle
       the most common cases.   This is likely to be hard and implementing
       it is really only for completeness.

Library
-------

****   Add more support for the C++ standard library.  std::complex and other
       core datatypes.   Refine support for STL vector.   Add more STL objects.

****   Continue to expand the set of recognized typemaps.

Python
------

****   Support for Python-2.2 style classes.

****   Ability to wrap certain classes as Python built-in types.

Perl
----

****  Rewrite runtime pointer type checking to better integrate
      shadow classes.   Creation of shadow classes should be done
      in C instead of Perl.   This will fix a number of problems
      related to typemaps and reduce the amount of Perl wrapper code.

Tcl
---

Ruby
----

Java
----

PHP
---

Guile
-----

Mzscheme
--------

Documentation
-------------

**** Extending SWIG (and internals).

***  Perl, Python, Tcl modules.

**   Add section on WAD.

Other
-----

****  Bring Tiger's .NET/CLR module online.

