Version 1.3.15 (In progress)
================================
08/19/2002: beazley
            Better support for using declarations and inheritance.   Consider this:

                class Foo {
                public:
                      int blah(int x);
                };

                class Bar {
                public:
                      double blah(double x);
                };

                class FooBar : public Foo, public Bar {
                public:
                      char *blah(char *x);
                      using Foo::blah;
                      using Bar::blah;
                };

            Now SWIG wraps FooBar::blah as an overloaded method that uses all
            accessible versions of blah().    See section 15.2.2 in Stroustrup, 3rd Ed.
          
08/18/2002: beazley
            Modified overloading dispatch to not include nodes with an "error" attribute.
            A language module can set this if a node couldn't be wrapped and you don't want
            it included in the dispatch function.

08/18/2002: beazley
            Enhancement to overloaded function dispatch.   The dispatcher is now aware of
            inheritance relationships.   For example:

                   class Foo { };
                   class Bar : public Foo { };
                    
                   void spam(Foo *f);
                   void spam(Bar *b);

            In this case, the dispatcher re-orders the functions so that spam(Bar *b) is
            checked first---it is more specific than spam(Foo *f).

08/17/2002: beazley
            Added -Werror command line option.   If supplied, warning messages are treated
            as errors and SWIG will return a non-zero exit code.

08/17/2002: beazley
            Fixed [ 596135 ] Typedef of reference can't compile.  For example:

                 typedef int &IntRef;
                 void foo(IntRef i);

            SWIG-1.3.14 generated code that wouldn't compile.
