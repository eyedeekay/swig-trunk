Version 1.3.15 (In progress)
================================
08/22/2002: beazley
            Exception handling code is no longer applied to member access
            function.  For example, in this code

                %exception {
                   try {
                      $action
                   } catch(whatever) {
                      ...
                   }
                }

                class Foo {
                public:
                    int x;
                    ...
                }

            The exception handling code is not applied to accessor functions
            for Foo::x.   This should reduce the amount of extra code
            generated.

            Caveat:  Exception handling code *is* used when attributes are
            accessed through a smart-pointer or a synthesized attributed
            added with %extend is used.

08/22/2002: beazley
            Made more patches to hopefully eliminate problems when compiling SWIG 
            as a 64-bit executable.

08/22/2002: beazley
            Fixed a bug with const reference members, variables, and static members.
            For example:

                  class Foo {
                  public:
                       static const int &ref;
                  };

            SWIG was trying to generate "set" functions which wouldn't compile. 

08/21/2002: beazley
            Made the warning message for "Class X might abstract" off by default.
            Enable with -Wall.

08/21/2002: beazley
            Refined handling of const and non-const overloaded methods.  If
            a class defines a method like this:

                class Foo {
                public:
                    int bar(int);
                    int bar(int) const;
                }

            Then the non-const method is *always* selected in overloading and
            the const method silently discarded.  If running with -Wall, a warning
            message will be generated.

08/19/2002: beazley
            Better support for using declarations and inheritance.   Consider this:

                class Foo {
                public:
                      int blah(int x);
                };

                class Bar {
                public:
                      double blah(double x);
                };

                class FooBar : public Foo, public Bar {
                public:
                      char *blah(char *x);
                      using Foo::blah;
                      using Bar::blah;
                };

            Now SWIG wraps FooBar::blah as an overloaded method that uses all
            accessible versions of blah().  See section 15.2.2 in Stroustrup, 3rd Ed.

            SWIG also supports access change through using declarations.  For example:

                class Foo {
                protected:
                     int x;
                     int blah(int x);
                };

                class Bar : public Foo {
                public:
                     using Foo::x;
                     using Foo::blah;
                };


            Caveat:   SWIG does not actually check to see if declarations imported
            via 'using' are in the inheritance hierarchy.  If this occurs, the
            wrapper code won't compile anyways---not sure it's worth worrying about.
          
08/18/2002: beazley
            Modified overloading dispatch to not include nodes with an "error" attribute.
            A language module can set this if a node couldn't be wrapped and you don't want
            it included in the dispatch function.

08/18/2002: beazley
            Enhancement to overloaded function dispatch.   The dispatcher is now aware of
            inheritance relationships.   For example:

                   class Foo { };
                   class Bar : public Foo { };
                    
                   void spam(Foo *f);
                   void spam(Bar *b);

            In this case, the dispatcher re-orders the functions so that spam(Bar *b) is
            checked first---it is more specific than spam(Foo *f).

08/17/2002: beazley
            Added -Werror command line option.   If supplied, warning messages are treated
            as errors and SWIG will return a non-zero exit code.

08/17/2002: beazley
            Fixed [ 596135 ] Typedef of reference can't compile.  For example:

                 typedef int &IntRef;
                 void foo(IntRef i);

            SWIG-1.3.14 generated code that wouldn't compile.
