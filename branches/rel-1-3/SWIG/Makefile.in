#######################################################################
# $Header$
#######################################################################

prefix      = @prefix@
exec_prefix = @exec_prefix@
srcdir      = @srcdir@

##############################################################################
# Compiler and system configuration
##############################################################################

SHELL       = /bin/sh
CC          = @CC@
CFLAGS      = @CFLAGS@
CXX         = @CXX@
LIBS        = @LIBS@
SWIGLIBS    = @SWIGLIBS@
AR          = @AR@
RANLIB      = @RANLIB@

# Note: Files in `SWIG_LIB' are machine independent so we use `prefix'
# instead of `exec_prefix' or, derivatively, `libdir'.
SWIG_LIB    = @swig_lib@
BIN_DIR     = @bindir@
INCLUDE_DIR = $(prefix)/include
RELEASESUFFIX = @release_suffix@
TARGET      = swig$(RELEASESUFFIX)
SOURCE      = Source
SOURCEDIRS  = `ls $(SOURCE)`

swig: Modules1.1 Swig Preprocessor CParse DOH runtime swig.spec
	$(CXX) -o $(TARGET) \
	$(SOURCE)/Modules1.1/libmodules11.a \
	$(SOURCE)/CParse/libcparse.a \
	$(SOURCE)/Preprocessor/libcpp.a \
	$(SOURCE)/Swig/libswig.a \
	$(SOURCE)/DOH/libdoh.a @SWIGLIBS@

Modules1.1: Source/Include/swigconfig.h
	@cd $(SOURCE)/Modules1.1; $(MAKE)

Swig: Source/Include/swigconfig.h
	@cd $(SOURCE)/Swig; $(MAKE)

Preprocessor: Source/Include/swigconfig.h
	@cd $(SOURCE)/Preprocessor; $(MAKE)

CParse: Source/Include/swigconfig.h
	@cd $(SOURCE)/CParse; $(MAKE)

swig.spec: swig.spec.in config.status
	@CONFIG_HEADERS= CONFIG_LINKS= CONFIG_FILES=swig.spec $(SHELL) ./config.status

DOH: Source/Include/swigconfig.h
	@cd $(SOURCE)/DOH; $(MAKE)

.PHONY: SWIG1.1 Modules1.1 Swig Preprocessor DOH runtime

# Config file must be generated at make time, rather than at configure
# time because it paths need to be substituted.

Source/Include/swigconfig.h: Source/Include/swigconfig.h.in Makefile.in config.status
	sed 's|@-swig_lib-@|$(SWIG_LIB)|g;s|@-exec_prefix-@|$(exec_prefix)|g;s|@-release_suffix-@|$(RELEASESUFFIX)|g' Source/Include/swigconfig.h.in > $@

#####################################################################
# All the languages SWIG speaks (when it wants to)
#####################################################################

skip-tcl	= [ -z "@TCLINCLUDE@" -o -z "@TCLLIB@" ]
skip-perl	= [ -z "@PERL@" -o -z "@PERL5EXT@" ]
skip-python	= [ -z "@PYINCLUDE@" -o -z "@PYLIB@" ]
skip-java	= [ -z "@JAVA@" -o -z "@JAVAC@" -o -z "@JAVAINC@" ]
skip-guile	= [ -z "@GUILEINCLUDE@" -o -z "@GUILELIB@" ]
skip-mzscheme	= [ -z "@MZC@" ]
skip-ruby	= [ -z "@RUBY@" -o -z "@RUBYINCLUDE@" -o -z "@RUBYLIB@" ]
skip-php4	= [ -z "@PHP4BIN@" -o -z "@PHP4INC@" ]
skip-ocaml      = [ -z "@OCAMLBIN@" -o -z "@OCAMLINC@" ]
skip-pike       = [ -z "@PIKE@" -o -z "@PIKEINCLUDE@" ]

#####################################################################
# Runtime libraries
#####################################################################

runtime:
	@-$(skip-tcl)      || (cd Runtime; $(MAKE) tcl)
	@-$(skip-python)   || (cd Runtime; $(MAKE) python)
	@-$(skip-perl)     || (cd Runtime; $(MAKE) perl5)
	@-$(skip-ruby)     || (cd Runtime; $(MAKE) ruby)
	@-$(skip-guile)    || (cd Runtime; $(MAKE) guile)
	@-$(skip-mzscheme) || (cd Runtime; $(MAKE) mzscheme)
	@-$(skip-php4)     || (cd Runtime; $(MAKE) php4)
	@-$(skip-ocaml)    || (cd Runtime; $(MAKE) ocaml)
	@-$(skip-pike)     || (cd Runtime; $(MAKE) pike)

#####################################################################
# CHECK
#####################################################################

ACTION = check

chk-set-swiglib		= SWIG_LIB=@ROOT_DIR@/Lib
chk-set-runtimelib	= RUNTIMEDIR=@ROOT_DIR@/Runtime/.libs
chk-set-swig		= SWIG=@ROOT_DIR@/$(TARGET)

chk-set-env = $(chk-set-swiglib) $(chk-set-swig) $(chk-set-runtimelib)

chk = $(MAKE) -k -s $(chk-set-env) $(ACTION)

check-aliveness:
	test -x ./$(TARGET)
	./$(TARGET) -version
	./$(TARGET) -help
	@$(skip-tcl)      || ./$(TARGET) -tcl      -help
	@$(skip-perl)     || ./$(TARGET) -perl     -help
	@$(skip-python)   || ./$(TARGET) -python   -help
	@$(skip-java)     || ./$(TARGET) -java     -help
	@$(skip-guile)    || ./$(TARGET) -guile    -help
	@$(skip-mzscheme) || ./$(TARGET) -mzscheme -help
	@$(skip-ruby)     || ./$(TARGET) -ruby     -help
	@$(skip-ocaml)    || ./$(TARGET) -ocaml    -help
	@$(skip-php4)     || ./$(TARGET) -php4     -help
	@$(skip-pike)     || ./$(TARGET) -pike     -help

check-examples:					\
	check-tcl-examples			\
	check-perl-examples			\
	check-python-examples			\
	check-java-examples			\
	check-guile-examples			\
	check-mzscheme-examples			\
	check-ruby-examples			\
	check-ocaml-examples			\
	check-php4-examples			\
	check-pike-examples

check-%-examples:
	@passed=true;						\
	dir="Examples/$*";					\
	if $(skip-$*); then					\
	  echo skipping $* $(ACTION);				\
	elif [ ! -f $$dir/check.list ]; then			\
	  echo skipping $* $(ACTION) "(no $$dir/check.list)";	\
	else							\
	  all=`sed '/^#/d' $$dir/check.list`;			\
	  for a in $$all; do					\
	    echo $(ACTION)ing $$dir/$$a;			\
	    (cd $$dir/$$a && $(chk))				\
	    || passed=false;					\
	  done;							\
	fi;							\
	test $$passed = true

check-test-suite:				\
	check-tcl-test-suite			\
	check-perl-test-suite			\
	check-python-test-suite			\
	check-java-test-suite			\
	check-guile-test-suite			\
	check-mzscheme-test-suite		\
	check-ruby-test-suite			\
	check-ocaml-test-suite			\
	check-php4-test-suite			\
	check-pike-test-suite

check-%-test-suite:
	@passed=true;							\
	dir="Examples/test-suite/$*";					\
	if $(skip-$*); then						\
	  echo skipping $* test-suite $(ACTION);			\
	elif [ ! -d $$dir ]; then					\
	  echo skipping $* test-suite $(ACTION) "(no dir $$dir)";	\
	else								\
	  (cd $$dir && $(chk))						\
	  || passed=false;						\
	fi;								\
	test $$passed = true

gifplot-library:
	@echo $(ACTION)ing Examples/GIFPlot/Lib
	@cd Examples/GIFPlot/Lib ; $(MAKE) -k -s $(ACTION)

check-gifplot:					\
	check-tcl-gifplot			\
	check-perl-gifplot			\
	check-python-gifplot			\
	check-java-gifplot			\
	check-guile-gifplot			\
	check-mzscheme-gifplot			\
	check-ruby-gifplot			\
	check-ocaml-gifplot			\
	check-php4-gifplot			\
	check-pike-gifplot

check-%-gifplot: gifplot-library
	@passed=true;						\
	up=`Tools/capitalize $*`;				\
	dir="Examples/GIFPlot/$$up";				\
	if $(skip-$*); then					\
	  echo skipping $$up $(ACTION);				\
	elif [ ! -f $$dir/check.list ]; then			\
	  echo skipping $$up $(ACTION) "(no $$dir/check.list)";	\
	else							\
	  all=`sed '/^#/d' $$dir/check.list`;			\
	  for a in $$all; do					\
	    echo $(ACTION)ing $$dir/$$a;			\
	    (cd $$dir/$$a && $(chk))				\
	    || passed=false;					\
	  done;							\
	fi;							\
	test $$passed = true

check: check-aliveness check-examples check-gifplot check-test-suite

#####################################################################
# CLEAN
#####################################################################

clean: clean-objects clean-examples clean-gifplot clean-test-suite

clean-objects:
	@for i in $(SOURCEDIRS) ; \
	do \
	   echo cleaning $(SOURCE)/$$i; \
	   if [ -d $(SOURCE)/$$i -a -f $(SOURCE)/$$i/Makefile ]; then \
		(cd $(SOURCE)/$$i; $(MAKE) -s clean) ; \
	   fi \
	done;
	@echo cleaning Runtime
	@cd Runtime; $(MAKE) -s clean
	@rm -f $(TARGET)

distclean-dead = config.status config.log config.cache swig.spec \
		 @configure_substituted_files@

distclean: clean
	rm -f $(distclean-dead)

clean-examples:
	@$(MAKE) -k -s check-examples ACTION=clean

clean-gifplot:
	@$(MAKE) -k -s check-gifplot ACTION=clean

clean-test-suite:
	@echo cleaning Examples/test-suite
	@$(MAKE) -k -s check-test-suite ACTION=clean


clean-tcl-examples:
	@$(MAKE) -k -s check-tcl-examples ACTION=clean

clean-perl5-examples:
	@$(MAKE) -k -s check-perl5-examples ACTION=clean

clean-python-examples:
	@$(MAKE) -k -s check-python-examples ACTION=clean

clean-java-examples:
	@$(MAKE) -k -s check-java-examples ACTION=clean

clean-guile-examples:
	@$(MAKE) -k -s check-guile-examples ACTION=clean

clean-mzscheme-examples:
	@$(MAKE) -k -s check-mzscheme-examples ACTION=clean

clean-ruby-examples:
	@$(MAKE) -k -s check-ruby-examples ACTION=clean

clean-pike-examples:
	@$(MAKE) -k -s check-pike-examples ACTION=clean

clean-php4-examples:
	@$(MAKE) -k -s check-php4-examples ACTION=clean

clean-tcl-test-suite:
	@$(MAKE) -k -s check-tcl-test-suite ACTION=clean

clean-perl5-test-suite:
	@$(MAKE) -k -s check-perl5-test-suite ACTION=clean

clean-python-test-suite:
	@$(MAKE) -k -s check-python-test-suite ACTION=clean

clean-java-test-suite:
	@$(MAKE) -k -s check-java-test-suite ACTION=clean

clean-guile-test-suite:
	@$(MAKE) -k -s check-guile-test-suite ACTION=clean

clean-mzscheme-test-suite:
	@$(MAKE) -k -s check-mzscheme-test-suite ACTION=clean

clean-ruby-test-suite:
	@$(MAKE) -k -s check-ruby-test-suite ACTION=clean

clean-pike-test-suite:
	@$(MAKE) -k -s check-pike-test-suite ACTION=clean

clean-php4-test-suite:
	@$(MAKE) -k -s check-php4-test-suite ACTION=clean



#####################################################################
# TARGETS: install & friends
#####################################################################

INSTALL         = install-sh -c
INSTALL_DATA    = ${INSTALL} -m 644
INSTALL_PROGRAM = $(srcdir)/${INSTALL} -m 755
MKINSTDIRS      = $(srcdir)/mkinstalldirs

install: install-main install-lib install-runtime
	@echo "Installation complete"

install-main:
	@echo "Installing $(BIN_DIR)/swig"
	@$(MKINSTDIRS) $(DESTDIR)$(BIN_DIR)
	@if [ -f swig.exe ]; then						\
		$(INSTALL_PROGRAM) swig.exe $(DESTDIR)$(BIN_DIR)/swig.exe;	\
	else									\
		$(INSTALL_PROGRAM) $(TARGET) $(DESTDIR)$(BIN_DIR)/$(TARGET);	\
	fi

install-lib:
	@echo "Installing the SWIG library"
	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)
#	cd $(SWIG_LIB); rm -rf *
#	The following line has `*.swg' removed -- add it back if needed.
	@cd $(srcdir)/Lib; for i in *.i *.swg; \
	    do \
	    echo "Installing Lib/$$i"; \
            ../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/$$i; \
	    done;
	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/tcl
	@cd $(srcdir)/Lib/tcl; for i in *.i *.swg; \
	    do \
	    echo "Installing Lib/tcl/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/tcl/$$i; \
	    done;
	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/perl5
	@cd $(srcdir)/Lib/perl5; for i in *.i *.swg Makefile.pl; \
	    do \
	    echo "Installing Lib/perl5/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/perl5/$$i; \
	    done;
	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/python
	@cd $(srcdir)/Lib/python; for i in *.i *.swg; \
	    do \
	    echo "Installing Lib/python/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/python/$$i; \
	    done;
	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/guile
	@cd $(srcdir)/Lib/guile; for i in *.i *.swg; \
	    do \
	    echo "Installing Lib/guile/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/guile/$$i; \
	    done;
	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/java
	@cd $(srcdir)/Lib/java; for i in *.i *.swg; \
	    do \
	    echo "Installing Lib/java/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/java/$$i; \
	    done;
	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/mzscheme
	@cd $(srcdir)/Lib/mzscheme; for i in *.i *.swg; \
	    do \
	    echo "Installing Lib/mzscheme/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/mzscheme/$$i; \
	    done;
	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/ruby
	@cd $(srcdir)/Lib/ruby; for i in *.i *.swg Makefile.swig extconf.rb; \
	    do \
	    echo "Installing Lib/ruby/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/ruby/$$i; \
	    done;

	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/php4
	@cd $(srcdir)/Lib/php4; for i in *.i *.swg; \
	    do \
	    echo "Installing Lib/php4/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/php4/$$i; \
	    done;

	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/ocaml
	@cd $(srcdir)/Lib/ocaml; for i in *.i *.swg; \
	    do \
	    echo "Installing Lib/ocaml/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/ocaml/$$i; \
	    done;
	@cd $(srcdir)/Lib/ocaml; for i in *.h; \
	    do \
	    echo "Installing Lib/ocaml/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/ocaml/$$i; \
	    done;

	@$(MKINSTDIRS) $(DESTDIR)$(SWIG_LIB)/pike
	@cd $(srcdir)/Lib/pike; for i in *.swg; \
	    do \
	    echo "Installing Lib/pike/$$i"; \
            ../../$(INSTALL_DATA) $$i $(DESTDIR)$(SWIG_LIB)/pike/$$i; \
	    done;

install-runtime:
	@cd Runtime; $(MAKE) install


#####################################################################
# TARGETS: uninstall & friends
#####################################################################

uninstall: uninstall-main uninstall-lib uninstall-runtime
	@echo "Uninstall complete"

uninstall-main:
	@echo "Uninstalling $(BIN_DIR)/swig"
	@if [ -f swig.exe ]; then                                               \
		rm -f $(DESTDIR)$(BIN_DIR)/swig.exe;   \
	else                                                                    \
		rm -f $(DESTDIR)$(BIN_DIR)/$(TARGET);  \
	fi

uninstall-lib:
	@echo "Uninstalling the SWIG library"
	rm -rf $(DESTDIR)$(SWIG_LIB)/;

uninstall-runtime:
	@cd Runtime; $(MAKE) uninstall


############################################################################
# DIST and other maintenance
############################################################################

# distribution directory
dd = @PACKAGE@-@VERSION@
srpm = @PACKAGE@-@SWIG_MAJOR_VERSION@.@SWIG_MINOR_VERSION@.@SWIG_SPIN@

dist:
	@echo 'Dave, what do you want to do w/ "make dist"?'
	@echo 'See Makefile.in target "dist-suggested" for an idea.'
	@echo '    --thi'
	false

dist-suggested:
	rm -rf $(dd) $(dd).tar.gz
	cvs export -d $(dd) -r HEAD SWIG
	tar cf - $(dd) | gzip --best > $(dd).tar.gz
	rm -rf $(dd)

srcrpm: swig.spec
	rm -fr $(srpm) $(srpm).src.rpm
	cvs export -d $(srpm) -r HEAD SWIG
	cp swig.spec $(srpm)
	tar -cf - $(srpm) | gzip --best > $(srpm).tar.gz
	rm -fr $(srpm)
	rpm -ts $(srpm).tar.gz

# Makefile ends here
