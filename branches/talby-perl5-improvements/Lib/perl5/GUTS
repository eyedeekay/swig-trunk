	At the heart of this runtime is the mechanism used to let the
Perl interpreter handle opaque native pointers.  I found it neccesary to
rebuild these as the code moves towards director support.  The key goals
are to hoist object attribute getters/setters entirely out of
interpreter space because spreading director code on both sides of the
fence would have introduced tremendous complexity.  A side benefit of
this change is that tie() mechanics will be returned to the SWIG wrapper
user, and Perl surfaced inheritance chains will be unsurprising to the
SWIG wrapper user.

	I surveyed many options for the central object wrapper model,
and the choices are numerous in Perl.  My goal was to present an object
that felt as much like a native object as possible.  Class::Accessor,
Class::Struct, Class::Std, Class::Std::Fast, and Class::Closure are all
common choices for Perl programmers.  These are all CPAN modules.  These
external language extensions all have attractive syntax and benefits,
but when considering only core Perl modules there is just one realistic
choice, the "fields" pragma.  "use fields" is a relatively new language
addition, but the Perl interpreter moving in a direction which makes
this choice clearly superior.  It is not ideal, but it's intent is the
best match with SWIG's needs.  (TODO: justify that claim.)

A wrapped native will leverage PERL_MAGIC_ext heavily.

PERL_MAGIC_ext (~) set via sv_magicext()

	Here's a rough sketch of the memory layout.

    "$stub" SV ──▸ HV (~) ────────────────╮
                    ├─ attr1 => val1 (~) ─┼─▸ "wrap" SV ──▸ nativePtr
                    ╰─ attr2 => val2 (~) ─╯

the "$stub" is what is presented to Perl as the object, it looks and
feels like a Perl created object.


Hmm... not working.  type information is required for reasonable
teardown semantics.


** more to come **

